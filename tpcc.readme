运行: 
    前置准备见 ./README.md
    cd build
    sudo -E ./tpcc -p11111 -c4 -sf16 -sf10 -t300000 -f../database/tpcc/config.txt
    注：由于在4机环境下测试，所以等比缩放了仓库数（8机时，仓库数=线程数*节点数，因而4机时该值由32改为16）

目前性能: 
    环境与参数：4node 4thread 2GBcache timeLocal=0 gReadratio=0
    dist_ratio:                     |   0  |  20  |  40  |  60  |  80  |  100 |
    total_throughput[4node](Ktps)   | 58.7 | 49.6 | 45.0 | 43.5 | 41.2 | 40.5 |
    论文性能[4node, estimated](Ktps) |  105 |  65  |  55  |  50  |  47  |  45  | 
    论文性能[8node](Ktps)            |  210 |  130 |  110 |  100 |  95  |  90  |
    *注：论文性能[4node, estimated]由论文性能[8node]减半得，为估计值。由于4机一致性维护的开销小于8机，所以测试性能本该好于论文性能[4node, estimated]

代码修改记录:

bug fixed:
    1.修改 database/tpcc/TpccPopulator.h GenerateDistrictNewOrderRecord函数的返回类型
    2.修改 database/tpcc/TpccProcedure.h 里的 all_local 变量 bool->int 四字节对齐
    3.修改 database/tpcc/TpccSource.h 里 ModifyPayment() 中的 memcpy -> 复制构造
profile:
    4.通过 include/custom_include/ScopedPerfProfiler 绘制火焰图(已注释) 结果在 ./images/ 中参考
    5.通过 include/custom_include/agent_stat RAII_Timer 记录每个API时间(已注释)，结果在 ./images/ 中参考 (rdtsc单位2.2GHz)
    6.其他的agent_stats_inst统计，RecordRead，RecordWrite,cachehit(已注释)
change:
    7.tpcc ProcessQuery boost::thread->std::thread,并绑核心
    8.include/AbstractMessageConnection.h kBatchCount 1/4/16
    9.尝试调整include/Common.h DSM_CACHE_LINE_WIDTH,DSM_CACHE_INDEX_WIDTH,CACHE_WAYS
    10.createQueuePair 默认深度 128->1024,ibv_create_cq 深度 1024 / 32000


