运行: 
    前置准备见 ./README.md (含以下过程：编译运行交换机代码、编译服务器代码、配置服务器网络、设置服务器大页)
    测试节点：amax1~amax4
    运行指令：
        cd build
        sudo -E ./tpcc -p11111 -c4 -sf16 -sf10 -t300000 -f../database/tpcc/config.txt
    *注：
        1. 无需输入的默认参数：timeLocal=0 (-l 0)，gReadratio=0 (gReadratio是把ReadWrite_Access变为ReadOnly_Access的比例,默认参数-r 0下实际读操作大约占0.3)
        2. 由于在4机环境下测试，所以等比缩放了第一个-sf参数。
           第一个-sf参数表示总仓库数，8机时，仓库数=线程数*节点数，因而4机时该值由32改为16；
           第二个-sf参数决定仓库初始大小（参数与仓库大小成反比），新事务从初始仓库随机读取价格库存顾客等信息，维持10（尝试过0.5,2,10,20,100，对性能影响不大）

目前性能（4node 4thread 2GBcache）: 
    dist_ratio                                         |   0  |  20  |  40  |  60  |  80  |  100 |
    GAM test throughput[4node](Ktps)                   | 96.8 | 67.5 | 48.7 | 46.9 | 44.5 | 39.8 |
    Concordia test throughput[4node](Ktps)             | 58.7 | 49.6 | 45.0 | 43.5 | 41.2 | 40.5 |
    Concordia paper throughput[4node, estimated](Ktps) |  105 |  65  |  55  |  50  |  47  |  45  | 
    Concordia paper throughput[8node](Ktps)            |  210 |  130 |  110 |  100 |  95  |  90  |
    *注：
        1. Concordia paper throughput[4node, estimated]由Concordia paper throughput[8node]减半得，为估计值。
        2. 由于4机一致性维护的开销小于8机，所以Concordia test throughput[4node]本该好于Concordia paper throughput[4node, estimated]

代码修改记录:
    bug fixed:
        0.相比初版代码运行时的实验环境，网络接口名称发生变动，因而修改了配置文件 (arp-*.sh, host, database/tpcc/config.txt) ，以及修改了整个工程中的硬编码内容 (用户名和工程路径)
        1.修改 database/tpcc/TpccPopulator.h 里的 GenerateDistrictNewOrderRecord 函数的返回类型，该函数无return但之前不是void
        2.修改 database/tpcc/TpccProcedure.h 里的 all_local 变量的类型 (bool->int) ，四字节对齐后续指针操作
        3.修改 database/tpcc/TpccSource.h 里的 ModifyPayment 函数中针对 last_payment_param_ 和 param 变量的赋值方法 (memcpy -> 复制构造) ，防止string堆区域二次析构
    profile:
        4.通过 include/custom_include/ScopedPerfProfiler 绘制火焰图 (已注释) 结果在 ./images/ 中参考
        5.通过 include/custom_include/agent_stat RAII_Timer 记录每个API时间 (已注释) ，结果在 ./images/ 中参考 (rdtsc单位2.2GHz)
        6.其他的agent_stats_inst统计，RecordRead，RecordWrite,cachehit (已注释)
    parameter change:
        7.在 /database/txn/TransactionExecutor.h 里的 ProcessQuery 函数中为了方便看堆栈把 boost::thread 改为 std::thread , 并且在函数内将线程绑核，对性能无影响
        8.调整 include/AbstractMessageConnection.h 里的 kBatchCount 参数：尝试过1/4/16，初始是4，对性能无影响
        9.调整 include/Common.h 里的 DSM_CACHE_LINE_WIDTH , DSM_CACHE_INDEX_WIDTH , CACHE_WAYS，发现cache总大小不变情况下，4路组相联和8路组相联性能影响不大
        10.调整 include/Rdma.h 里的 createQueuePair 函数中的 qpsMaxDepth 参数 (128->1024) ,调整 include/Common.h 里的 RAW_RECV_CQ_COUNT 宏 (128->1024->32000，代表ibv_create_cq深度) ：略微提高性能
        11.调整 include/Common.h 里的 APP_MESSAGE_NR , AGENT_MESSAGE_NR , DIR_MESSAGE_NR 至1024 (代表线程初始sendpool大小) ，调整 APP_POST_IMM_RECV 至1024 (代表预留批量接收区域)：对性能影响不大


