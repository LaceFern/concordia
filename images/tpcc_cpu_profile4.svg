<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="534.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="517" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="517" > </text>
<g id="frames">
<g >
<title>DSM::Get (8,306,840 samples, 0.01%)</title><rect x="1186.9" y="357" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1189.91" y="367.5" ></text>
</g>
<g >
<title>sysmalloc (95,225,552 samples, 0.12%)</title><rect x="808.3" y="229" width="1.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="811.26" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned short&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2,874,214,611 samples, 3.63%)</title><rect x="674.4" y="325" width="42.9" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="677.43" y="335.5" >std:..</text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned short&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (1,836,863,726 samples, 2.32%)</title><rect x="778.1" y="325" width="27.3" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="781.06" y="335.5" >s..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (37,547,275 samples, 0.05%)</title><rect x="776.0" y="325" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="778.99" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned short&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (135,693,444 samples, 0.17%)</title><rect x="720.2" y="341" width="2.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="723.25" y="351.5" ></text>
</g>
<g >
<title>AbstractMessageConnection::getMessage (31,786,340 samples, 0.04%)</title><rect x="153.8" y="373" width="0.4" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="156.77" y="383.5" ></text>
</g>
<g >
<title>exc_page_fault (57,833,177 samples, 0.07%)</title><rect x="758.6" y="293" width="0.9" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="761.61" y="303.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned short&gt;::compare_exchange_strong (51,958,474 samples, 0.07%)</title><rect x="155.0" y="341" width="0.7" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="157.97" y="351.5" ></text>
</g>
<g >
<title>__handle_mm_fault (14,384,563 samples, 0.02%)</title><rect x="777.5" y="245" width="0.2" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="780.50" y="255.5" ></text>
</g>
<g >
<title>[libmlx5.so.1.24.47.0] (17,329,383 samples, 0.02%)</title><rect x="144.0" y="437" width="0.2" height="15.0" fill="rgb(224,87,21)" rx="2" ry="2" />
<text  x="146.95" y="447.5" ></text>
</g>
<g >
<title>handle_pte_fault (46,772,264 samples, 0.06%)</title><rect x="807.4" y="149" width="0.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="810.39" y="159.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, BlockInfo*, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, BlockInfo*&gt; &gt; &gt;::operator[] (8,715,683 samples, 0.01%)</title><rect x="814.1" y="373" width="0.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="817.11" y="383.5" ></text>
</g>
<g >
<title>Directory::processSwitchMiss (8,664,594 samples, 0.01%)</title><rect x="1186.7" y="405" width="0.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1189.68" y="415.5" ></text>
</g>
<g >
<title>handle_mm_fault (11,448,931 samples, 0.01%)</title><rect x="716.8" y="229" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="719.81" y="239.5" ></text>
</g>
<g >
<title>[libmlx5.so.1.24.47.0] (30,127,958,000 samples, 38.07%)</title><rect x="204.4" y="357" width="449.2" height="15.0" fill="rgb(224,87,21)" rx="2" ry="2" />
<text  x="207.41" y="367.5" >[libmlx5.so.1.24.47.0]</text>
</g>
<g >
<title>main (9,294,859 samples, 0.01%)</title><rect x="1186.9" y="405" width="0.1" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="1189.90" y="415.5" ></text>
</g>
<g >
<title>__x64_sys_mprotect (92,337,327 samples, 0.12%)</title><rect x="808.3" y="149" width="1.4" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="811.30" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned short&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (2,290,545,931 samples, 2.89%)</title><rect x="775.6" y="357" width="34.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="778.61" y="367.5" >st..</text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned short&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (2,767,609,959 samples, 3.50%)</title><rect x="734.3" y="341" width="41.3" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="737.34" y="351.5" >std..</text>
</g>
<g >
<title>hrtimer_interrupt (14,450,184 samples, 0.02%)</title><rect x="653.4" y="293" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="656.38" y="303.5" ></text>
</g>
<g >
<title>change_protection_range (11,516,127 samples, 0.01%)</title><rect x="808.5" y="85" width="0.1" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="811.47" y="95.5" ></text>
</g>
<g >
<title>exc_page_fault (100,962,720 samples, 0.13%)</title><rect x="798.7" y="229" width="1.5" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="801.72" y="239.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned short&gt;::compare_exchange_strong (204,924,867 samples, 0.26%)</title><rect x="160.8" y="357" width="3.0" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="163.78" y="367.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (66,293,960 samples, 0.08%)</title><rect x="758.5" y="309" width="1.0" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="761.48" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, BlockInfo*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, BlockInfo*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (14,406,061 samples, 0.02%)</title><rect x="813.6" y="309" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="816.63" y="319.5" ></text>
</g>
<g >
<title>sync_regs (17,303,719 samples, 0.02%)</title><rect x="717.0" y="309" width="0.3" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="720.02" y="319.5" ></text>
</g>
<g >
<title>do_wp_page (8,607,575 samples, 0.01%)</title><rect x="777.6" y="213" width="0.1" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="780.59" y="223.5" ></text>
</g>
<g >
<title>AbstractMessageConnection::getMessage (1,021,473,069 samples, 1.29%)</title><rect x="656.2" y="389" width="15.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="659.18" y="399.5" ></text>
</g>
<g >
<title>Directory::processSwitchMiss (300,202,495 samples, 0.38%)</title><rect x="809.8" y="389" width="4.4" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="812.76" y="399.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned short&gt;::load (63,470,859 samples, 0.08%)</title><rect x="155.7" y="357" width="1.0" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="158.75" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, BlockInfo*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (14,406,061 samples, 0.02%)</title><rect x="813.6" y="277" width="0.2" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="816.63" y="287.5" ></text>
</g>
<g >
<title>__pthread_spin_lock (455,756,514 samples, 0.58%)</title><rect x="833.2" y="325" width="6.8" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="836.17" y="335.5" ></text>
</g>
<g >
<title>rdmaWrite (314,461,622 samples, 0.40%)</title><rect x="164.8" y="357" width="4.7" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="167.79" y="367.5" ></text>
</g>
<g >
<title>tpcc (79,136,289,117 samples, 100.00%)</title><rect x="10.0" y="469" width="1180.0" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="13.00" y="479.5" >tpcc</text>
</g>
<g >
<title>asm_exc_page_fault (83,096,380 samples, 0.11%)</title><rect x="699.4" y="309" width="1.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="702.42" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (106,939,698 samples, 0.14%)</title><rect x="732.7" y="309" width="1.6" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="735.74" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, BlockInfo*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, BlockInfo*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (49,032,550 samples, 0.06%)</title><rect x="813.4" y="341" width="0.7" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="816.38" y="351.5" ></text>
</g>
<g >
<title>handle_mm_fault (60,272,242 samples, 0.08%)</title><rect x="699.5" y="261" width="0.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="702.54" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long, std::pair&lt;unsigned long const, BlockInfo*&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (14,406,843 samples, 0.02%)</title><rect x="813.8" y="309" width="0.3" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="816.85" y="319.5" ></text>
</g>
<g >
<title>Directory::sendAck2AppByPassSwitch (89,482,145 samples, 0.11%)</title><rect x="816.7" y="373" width="1.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="819.69" y="383.5" ></text>
</g>
<g >
<title>Cache::findLineForAgent (265,647,459 samples, 0.34%)</title><rect x="156.8" y="373" width="4.0" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="159.82" y="383.5" ></text>
</g>
<g >
<title>[libmlx5.so.1.24.47.0] (37,525,344 samples, 0.05%)</title><rect x="22.7" y="437" width="0.6" height="15.0" fill="rgb(224,87,21)" rx="2" ry="2" />
<text  x="25.74" y="447.5" ></text>
</g>
<g >
<title>__handle_mm_fault (8,667,237 samples, 0.01%)</title><rect x="775.2" y="213" width="0.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="778.22" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (46,173,898 samples, 0.06%)</title><rect x="728.1" y="277" width="0.7" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="731.12" y="287.5" ></text>
</g>
<g >
<title>do_user_addr_fault (14,444,826 samples, 0.02%)</title><rect x="775.2" y="245" width="0.2" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="778.18" y="255.5" ></text>
</g>
<g >
<title>change_p4d_range (11,516,127 samples, 0.01%)</title><rect x="808.5" y="69" width="0.1" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="811.47" y="79.5" ></text>
</g>
<g >
<title>__handle_mm_fault (11,544,810 samples, 0.01%)</title><rect x="764.3" y="197" width="0.2" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="767.29" y="207.5" ></text>
</g>
<g >
<title>__handle_mm_fault (51,779,044 samples, 0.07%)</title><rect x="699.6" y="245" width="0.8" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="702.59" y="255.5" ></text>
</g>
<g >
<title>tick_sched_handle (8,669,885 samples, 0.01%)</title><rect x="653.4" y="245" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="656.38" y="255.5" ></text>
</g>
<g >
<title>__pthread_spin_unlock (17,329,754 samples, 0.02%)</title><rect x="151.7" y="437" width="0.3" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="154.70" y="447.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (193,074,578 samples, 0.24%)</title><rect x="1187.0" y="453" width="2.9" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1190.03" y="463.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long&gt;::operator (820,805,517 samples, 1.04%)</title><rect x="704.8" y="293" width="12.2" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="707.79" y="303.5" ></text>
</g>
<g >
<title>find_vma (8,659,036 samples, 0.01%)</title><rect x="777.3" y="261" width="0.2" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="780.33" y="271.5" ></text>
</g>
<g >
<title>_int_malloc (193,921,602 samples, 0.25%)</title><rect x="806.8" y="245" width="2.9" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="809.78" y="255.5" ></text>
</g>
<g >
<title>[libmlx5.so.1.24.47.0] (6,539,301,336 samples, 8.26%)</title><rect x="23.4" y="437" width="97.5" height="15.0" fill="rgb(224,87,21)" rx="2" ry="2" />
<text  x="26.43" y="447.5" >[libmlx5.so..</text>
</g>
<g >
<title>[libmlx5.so.1.24.47.0] (450,429,640 samples, 0.57%)</title><rect x="144.6" y="437" width="6.7" height="15.0" fill="rgb(224,87,21)" rx="2" ry="2" />
<text  x="147.56" y="447.5" ></text>
</g>
<g >
<title>perf_event_mmap (69,268,534 samples, 0.09%)</title><rect x="808.6" y="101" width="1.1" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="811.64" y="111.5" ></text>
</g>
<g >
<title>Directory::in_host_unlock (8,665,366 samples, 0.01%)</title><rect x="671.4" y="389" width="0.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="674.41" y="399.5" ></text>
</g>
<g >
<title>[unknown] (557,203,336 samples, 0.70%)</title><rect x="144.2" y="453" width="8.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="147.21" y="463.5" ></text>
</g>
<g >
<title>[unknown]  (17,329,383 samples, 0.02%)</title><rect x="144.0" y="453" width="0.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="146.95" y="463.5" ></text>
</g>
<g >
<title>alloc_pages_vma (23,088,183 samples, 0.03%)</title><rect x="799.7" y="133" width="0.3" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="802.70" y="143.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (14,444,826 samples, 0.02%)</title><rect x="775.2" y="277" width="0.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="778.18" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned short&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (739,785,940 samples, 0.93%)</title><rect x="720.2" y="357" width="11.1" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="723.25" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (8,628,906 samples, 0.01%)</title><rect x="777.8" y="293" width="0.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="780.80" y="303.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, unsigned short, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned short&gt; &gt; &gt;::find (751,338,592 samples, 0.95%)</title><rect x="720.1" y="373" width="11.2" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="723.08" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (262,627,492 samples, 0.33%)</title><rect x="700.7" y="293" width="3.9" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="703.70" y="303.5" ></text>
</g>
<g >
<title>handle_mm_fault (55,419,985 samples, 0.07%)</title><rect x="807.3" y="181" width="0.8" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="810.30" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned short&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long const&amp;&gt;, std::tuple&lt;&gt; &gt; (283,440,654 samples, 0.36%)</title><rect x="805.5" y="341" width="4.3" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="808.53" y="351.5" ></text>
</g>
<g >
<title>[libmlx5.so.1.24.47.0] (262,656,989 samples, 0.33%)</title><rect x="667.5" y="357" width="3.9" height="15.0" fill="rgb(224,87,21)" rx="2" ry="2" />
<text  x="670.50" y="367.5" ></text>
</g>
<g >
<title>[libmlx5.so.1.24.47.0] (1,130,821,057 samples, 1.43%)</title><rect x="823.1" y="341" width="16.9" height="15.0" fill="rgb(224,87,21)" rx="2" ry="2" />
<text  x="826.14" y="351.5" ></text>
</g>
<g >
<title>exc_page_fault (14,336,558 samples, 0.02%)</title><rect x="716.8" y="261" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="719.77" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned short&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (34,711,869 samples, 0.04%)</title><rect x="152.0" y="437" width="0.5" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="155.00" y="447.5" ></text>
</g>
<g >
<title>change_pmd_range.isra.0 (11,516,127 samples, 0.01%)</title><rect x="808.5" y="53" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="811.47" y="63.5" ></text>
</g>
<g >
<title>CacheAgent::sendData2App (366,402,393 samples, 0.46%)</title><rect x="164.0" y="389" width="5.5" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="167.01" y="399.5" ></text>
</g>
<g >
<title>__memcpy_evex_unaligned_erms (11,552,451 samples, 0.01%)</title><rect x="151.3" y="437" width="0.1" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="154.27" y="447.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (58,307,849 samples, 0.07%)</title><rect x="807.3" y="229" width="0.8" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="810.26" y="239.5" ></text>
</g>
<g >
<title>rdmaWrite (31,775,583 samples, 0.04%)</title><rect x="164.3" y="341" width="0.5" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="167.31" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (83,676,237 samples, 0.11%)</title><rect x="672.9" y="309" width="1.3" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="675.92" y="319.5" ></text>
</g>
<g >
<title>do_anonymous_page (46,772,264 samples, 0.06%)</title><rect x="807.4" y="133" width="0.7" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="810.39" y="143.5" ></text>
</g>
<g >
<title>__pthread_spin_lock (17,200,850 samples, 0.02%)</title><rect x="151.4" y="437" width="0.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="154.44" y="447.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (112,494,920 samples, 0.14%)</title><rect x="798.5" y="245" width="1.7" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="801.54" y="255.5" ></text>
</g>
<g >
<title>Directory::in_host_write_miss (8,665,180 samples, 0.01%)</title><rect x="671.5" y="389" width="0.2" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="674.54" y="399.5" ></text>
</g>
<g >
<title>RawMessageConnection::sendRawMessage (8,665,366 samples, 0.01%)</title><rect x="671.4" y="373" width="0.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="674.41" y="383.5" ></text>
</g>
<g >
<title>[libmlx5.so.1.24.47.0] (57,517,783 samples, 0.07%)</title><rect x="819.2" y="341" width="0.8" height="15.0" fill="rgb(224,87,21)" rx="2" ry="2" />
<text  x="822.19" y="351.5" ></text>
</g>
<g >
<title>__libc_start_main_impl (9,294,859 samples, 0.01%)</title><rect x="1186.9" y="437" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1189.90" y="447.5" ></text>
</g>
<g >
<title>[[heap]] (846,000,368 samples, 1.07%)</title><rect x="10.1" y="453" width="12.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="13.13" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, BlockInfo*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, BlockInfo*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (51,918,291 samples, 0.07%)</title><rect x="813.3" y="357" width="0.8" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="816.33" y="367.5" ></text>
</g>
<g >
<title>[libmlx5.so.1.24.47.0] (825,227,829 samples, 1.04%)</title><rect x="1007.2" y="341" width="12.3" height="15.0" fill="rgb(224,87,21)" rx="2" ry="2" />
<text  x="1010.22" y="351.5" ></text>
</g>
<g >
<title>__pthread_spin_lock (25,915,653 samples, 0.03%)</title><rect x="819.7" y="325" width="0.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="822.66" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (340,604,230 samples, 0.43%)</title><rect x="759.5" y="277" width="5.0" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="762.47" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned short&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2,732,958,156 samples, 3.45%)</title><rect x="734.9" y="325" width="40.7" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="737.86" y="335.5" >std..</text>
</g>
<g >
<title>std::equal_to&lt;unsigned long&gt;::operator (675,219,077 samples, 0.85%)</title><rect x="765.5" y="293" width="10.0" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="768.45" y="303.5" ></text>
</g>
<g >
<title>do_numa_page (28,777,972 samples, 0.04%)</title><rect x="699.9" y="213" width="0.5" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="702.93" y="223.5" ></text>
</g>
<g >
<title>__pthread_spin_unlock (395,508,722 samples, 0.50%)</title><rect x="16.8" y="437" width="5.9" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="19.76" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned short&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (75,016,340 samples, 0.09%)</title><rect x="727.7" y="309" width="1.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="730.69" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned short&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (25,968,114 samples, 0.03%)</title><rect x="776.6" y="341" width="0.3" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="779.55" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned short&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (109,828,021 samples, 0.14%)</title><rect x="732.7" y="341" width="1.6" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="735.70" y="351.5" ></text>
</g>
<g >
<title>__pagevec_lru_add (8,652,175 samples, 0.01%)</title><rect x="800.0" y="101" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="803.05" y="111.5" ></text>
</g>
<g >
<title>_start (9,294,859 samples, 0.01%)</title><rect x="1186.9" y="453" width="0.1" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1189.90" y="463.5" ></text>
</g>
<g >
<title>Directory::primitive_r_lock (3,058,865,716 samples, 3.87%)</title><rect x="671.7" y="389" width="45.6" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="674.67" y="399.5" >Dire..</text>
</g>
<g >
<title>lru_cache_add_inactive_or_unevictable (8,652,175 samples, 0.01%)</title><rect x="800.0" y="133" width="0.2" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="803.05" y="143.5" ></text>
</g>
<g >
<title>usleep (8,306,840 samples, 0.01%)</title><rect x="1186.9" y="325" width="0.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1189.91" y="335.5" ></text>
</g>
<g >
<title>exc_page_fault (31,709,121 samples, 0.04%)</title><rect x="777.3" y="293" width="0.5" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="780.33" y="303.5" ></text>
</g>
<g >
<title>__handle_mm_fault (11,448,931 samples, 0.01%)</title><rect x="716.8" y="213" width="0.2" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="719.81" y="223.5" ></text>
</g>
<g >
<title>[libmlx5.so.1.24.47.0] (21,913,729,585 samples, 27.69%)</title><rect x="859.8" y="357" width="326.8" height="15.0" fill="rgb(224,87,21)" rx="2" ry="2" />
<text  x="862.80" y="367.5" >[libmlx5.so.1.24.47.0]</text>
</g>
<g >
<title>pollWithCQ (22,786,296,201 samples, 28.79%)</title><rect x="846.8" y="373" width="339.8" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="849.79" y="383.5" >pollWithCQ</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (83,676,237 samples, 0.11%)</title><rect x="672.9" y="325" width="1.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="675.92" y="335.5" ></text>
</g>
<g >
<title>__pthread_spin_unlock (775,690,456 samples, 0.98%)</title><rect x="131.8" y="437" width="11.6" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="134.78" y="447.5" ></text>
</g>
<g >
<title>do_user_addr_fault (58,307,849 samples, 0.07%)</title><rect x="807.3" y="197" width="0.8" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="810.26" y="207.5" ></text>
</g>
<g >
<title>[libmlx5.so.1.24.47.0] (31,786,340 samples, 0.04%)</title><rect x="153.8" y="357" width="0.4" height="15.0" fill="rgb(224,87,21)" rx="2" ry="2" />
<text  x="156.77" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (8,628,906 samples, 0.01%)</title><rect x="777.8" y="277" width="0.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="780.80" y="287.5" ></text>
</g>
<g >
<title>LineInfo::setInvalid (40,437,933 samples, 0.05%)</title><rect x="154.4" y="373" width="0.6" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="157.37" y="383.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (277,664,827 samples, 0.35%)</title><rect x="805.6" y="261" width="4.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="808.62" y="271.5" ></text>
</g>
<g >
<title>mprotect_fixup (80,784,661 samples, 0.10%)</title><rect x="808.5" y="117" width="1.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="811.47" y="127.5" ></text>
</g>
<g >
<title>start_thread (69,364,352,221 samples, 87.65%)</title><rect x="152.5" y="437" width="1034.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="155.52" y="447.5" >start_thread</text>
</g>
<g >
<title>pollWithCQ (23,022,522 samples, 0.03%)</title><rect x="143.4" y="437" width="0.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="146.39" y="447.5" ></text>
</g>
<g >
<title>update_process_times (8,669,885 samples, 0.01%)</title><rect x="653.4" y="229" width="0.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="656.38" y="239.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (14,572,391 samples, 0.02%)</title><rect x="653.4" y="341" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="656.38" y="351.5" ></text>
</g>
<g >
<title>[libmlx5.so.1.24.47.0] (23,065,675 samples, 0.03%)</title><rect x="832.6" y="325" width="0.3" height="15.0" fill="rgb(224,87,21)" rx="2" ry="2" />
<text  x="835.56" y="335.5" ></text>
</g>
<g >
<title>perf_iterate_ctx (69,268,534 samples, 0.09%)</title><rect x="808.6" y="53" width="1.1" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="811.64" y="63.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, unsigned short, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned short&gt; &gt; &gt;::operator[] (2,290,545,931 samples, 2.89%)</title><rect x="775.6" y="373" width="34.2" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="778.61" y="383.5" >st..</text>
</g>
<g >
<title>pollWithCQ (31,719,495,917 samples, 40.08%)</title><rect x="180.7" y="373" width="472.9" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="183.68" y="383.5" >pollWithCQ</text>
</g>
<g >
<title>GlobalAddress::getIndex (31,705,296 samples, 0.04%)</title><rect x="157.2" y="357" width="0.5" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="160.21" y="367.5" ></text>
</g>
<g >
<title>__alloc_pages (20,200,482 samples, 0.03%)</title><rect x="799.7" y="117" width="0.3" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="802.75" y="127.5" ></text>
</g>
<g >
<title>charge_memcg (46,148,577 samples, 0.06%)</title><rect x="798.8" y="117" width="0.7" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="801.80" y="127.5" ></text>
</g>
<g >
<title>clear_page_erms (11,540,907 samples, 0.01%)</title><rect x="799.9" y="85" width="0.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="802.88" y="95.5" ></text>
</g>
<g >
<title>__handle_mm_fault (49,660,379 samples, 0.06%)</title><rect x="807.4" y="165" width="0.7" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="810.39" y="175.5" ></text>
</g>
<g >
<title>perf_iterate_sb (69,268,534 samples, 0.09%)</title><rect x="808.6" y="69" width="1.1" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="811.64" y="79.5" ></text>
</g>
<g >
<title>__pthread_spin_unlock (11,526,068 samples, 0.01%)</title><rect x="1186.3" y="341" width="0.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1189.34" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (92,073,451 samples, 0.12%)</title><rect x="800.3" y="277" width="1.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="803.35" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (398,385,709 samples, 0.50%)</title><rect x="759.5" y="293" width="5.9" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="762.47" y="303.5" ></text>
</g>
<g >
<title>__GI___nanosleep (8,306,840 samples, 0.01%)</title><rect x="1186.9" y="309" width="0.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1189.91" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned short&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (40,436,005 samples, 0.05%)</title><rect x="776.0" y="341" width="0.6" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="778.95" y="351.5" ></text>
</g>
<g >
<title>handle_mm_fault (14,433,651 samples, 0.02%)</title><rect x="764.3" y="213" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="767.29" y="223.5" ></text>
</g>
<g >
<title>do_user_addr_fault (14,433,651 samples, 0.02%)</title><rect x="764.3" y="229" width="0.2" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="767.29" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned short&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (86,564,895 samples, 0.11%)</title><rect x="672.9" y="341" width="1.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="675.88" y="351.5" ></text>
</g>
<g >
<title>do_user_addr_fault (57,833,177 samples, 0.07%)</title><rect x="758.6" y="277" width="0.9" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="761.61" y="287.5" ></text>
</g>
<g >
<title>exc_page_fault (14,433,651 samples, 0.02%)</title><rect x="764.3" y="245" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="767.29" y="255.5" ></text>
</g>
<g >
<title>__libc_start_call_main (9,294,859 samples, 0.01%)</title><rect x="1186.9" y="421" width="0.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1189.90" y="431.5" ></text>
</g>
<g >
<title>CacheAgent::processReadMissInv (479,241,331 samples, 0.61%)</title><rect x="156.7" y="389" width="7.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="159.69" y="399.5" ></text>
</g>
<g >
<title>handle_pte_fault (8,560,440 samples, 0.01%)</title><rect x="716.9" y="197" width="0.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="719.85" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned short&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (20,191,079 samples, 0.03%)</title><rect x="776.6" y="309" width="0.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="779.64" y="319.5" ></text>
</g>
<g >
<title>rcu_read_unlock_strict (8,655,344 samples, 0.01%)</title><rect x="799.5" y="117" width="0.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="802.53" y="127.5" ></text>
</g>
<g >
<title>RawMessageConnection::sendRawMessage (1,462,419,181 samples, 1.85%)</title><rect x="818.2" y="389" width="21.8" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="821.20" y="399.5" >R..</text>
</g>
<g >
<title>__mem_cgroup_charge (25,991,233 samples, 0.03%)</title><rect x="807.5" y="117" width="0.4" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="810.47" y="127.5" ></text>
</g>
<g >
<title>perf_event_mmap_event (69,268,534 samples, 0.09%)</title><rect x="808.6" y="85" width="1.1" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="811.64" y="95.5" ></text>
</g>
<g >
<title>do_mprotect_pkey (92,337,327 samples, 0.12%)</title><rect x="808.3" y="133" width="1.4" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="811.30" y="143.5" ></text>
</g>
<g >
<title>AbstractMessageConnection::getMessage (100,990,039 samples, 0.13%)</title><rect x="152.7" y="389" width="1.5" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="155.73" y="399.5" ></text>
</g>
<g >
<title>CacheAgent::processImmRet (161,647,177 samples, 0.20%)</title><rect x="154.3" y="389" width="2.4" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="157.28" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned short&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_allocate_buckets (124,032,958 samples, 0.16%)</title><rect x="798.4" y="293" width="1.9" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="801.41" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned short&gt;, false&gt;::_M_next (249,928,369 samples, 0.32%)</title><rect x="801.7" y="293" width="3.7" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="804.72" y="303.5" ></text>
</g>
<g >
<title>do_user_addr_fault (14,336,558 samples, 0.02%)</title><rect x="716.8" y="245" width="0.2" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="719.77" y="255.5" ></text>
</g>
<g >
<title>pollWithCQ (23,241,121,687 samples, 29.37%)</title><rect x="840.0" y="389" width="346.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="843.00" y="399.5" >pollWithCQ</text>
</g>
<g >
<title>CacheAgent::agentThread (33,607,807,565 samples, 42.47%)</title><rect x="152.5" y="405" width="501.1" height="15.0" fill="rgb(213,36,8)" rx="2" ry="2" />
<text  x="155.52" y="415.5" >CacheAgent::agentThread</text>
</g>
<g >
<title>std::equal_to&lt;unsigned long&gt;::operator (14,406,843 samples, 0.02%)</title><rect x="813.8" y="293" width="0.3" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="816.85" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (832,356,849 samples, 1.05%)</title><rect x="704.6" y="309" width="12.4" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="707.61" y="319.5" ></text>
</g>
<g >
<title>__GI___mprotect (95,225,552 samples, 0.12%)</title><rect x="808.3" y="197" width="1.4" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="811.26" y="207.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, unsigned short, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned short&gt; &gt; &gt;::find (2,880,326,253 samples, 3.64%)</title><rect x="732.7" y="373" width="42.9" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="735.66" y="383.5" >std:..</text>
</g>
<g >
<title>pollWithCQ (63,293,643 samples, 0.08%)</title><rect x="819.1" y="373" width="0.9" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="822.10" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (135,693,444 samples, 0.17%)</title><rect x="720.2" y="325" width="2.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="723.25" y="335.5" ></text>
</g>
<g >
<title>Database::ClusterSync::MasterBroadcast&lt;Database::PerfStatistics&gt; (8,306,840 samples, 0.01%)</title><rect x="1186.9" y="373" width="0.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1189.91" y="383.5" ></text>
</g>
<g >
<title>all (79,136,289,117 samples, 100%)</title><rect x="10.0" y="485" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>Directory::primitive_r_unlock (938,681,264 samples, 1.19%)</title><rect x="717.3" y="389" width="14.0" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="720.28" y="399.5" ></text>
</g>
<g >
<title>__handle_mm_fault (98,078,420 samples, 0.12%)</title><rect x="798.7" y="181" width="1.5" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="801.72" y="191.5" ></text>
</g>
<g >
<title>handle_pte_fault (14,384,563 samples, 0.02%)</title><rect x="777.5" y="229" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="780.50" y="239.5" ></text>
</g>
<g >
<title>Directory::sendData2App (8,665,076 samples, 0.01%)</title><rect x="818.1" y="389" width="0.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="821.07" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (165,546,327 samples, 0.21%)</title><rect x="728.8" y="309" width="2.5" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="731.81" y="319.5" ></text>
</g>
<g >
<title>fillSgeWr (31,775,583 samples, 0.04%)</title><rect x="164.3" y="357" width="0.5" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="167.31" y="367.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned short&gt;::compare_exchange_strong (51,958,474 samples, 0.07%)</title><rect x="155.0" y="357" width="0.7" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="157.97" y="367.5" ></text>
</g>
<g >
<title>[libmlx5.so.1.24.47.0] (311,572,007 samples, 0.39%)</title><rect x="164.8" y="341" width="4.7" height="15.0" fill="rgb(224,87,21)" rx="2" ry="2" />
<text  x="167.83" y="351.5" ></text>
</g>
<g >
<title>fillSgeWr (158,641,702 samples, 0.20%)</title><rect x="820.4" y="357" width="2.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="823.43" y="367.5" ></text>
</g>
<g >
<title>pollWithCQ (63,293,643 samples, 0.08%)</title><rect x="819.1" y="357" width="0.9" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="822.10" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (57,781,479 samples, 0.07%)</title><rect x="764.5" y="277" width="0.9" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="767.55" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned short&gt;, false&gt; &gt; &gt;::_M_allocate_buckets (124,032,958 samples, 0.16%)</title><rect x="798.4" y="277" width="1.9" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="801.41" y="287.5" ></text>
</g>
<g >
<title>AbstractMessageConnection::getQPN (20,276,438 samples, 0.03%)</title><rect x="814.6" y="373" width="0.3" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="817.58" y="383.5" ></text>
</g>
<g >
<title>perf_event_mmap_output (14,425,348 samples, 0.02%)</title><rect x="809.5" y="37" width="0.2" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="812.46" y="47.5" ></text>
</g>
<g >
<title>std::atomic&lt;AtomicTag&gt;::load (207,927,822 samples, 0.26%)</title><rect x="157.7" y="341" width="3.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="160.68" y="351.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, BlockInfo*, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, BlockInfo*&gt; &gt; &gt;::find (51,918,291 samples, 0.07%)</title><rect x="813.3" y="373" width="0.8" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="816.33" y="383.5" ></text>
</g>
<g >
<title>ExchPerfStatistics (8,306,840 samples, 0.01%)</title><rect x="1186.9" y="389" width="0.1" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="1189.91" y="399.5" ></text>
</g>
<g >
<title>try_charge_memcg (34,613,781 samples, 0.04%)</title><rect x="799.0" y="101" width="0.5" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="801.97" y="111.5" ></text>
</g>
<g >
<title>tick_sched_timer (8,669,885 samples, 0.01%)</title><rect x="653.4" y="261" width="0.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="656.38" y="271.5" ></text>
</g>
<g >
<title>do_user_addr_fault (68,686,523 samples, 0.09%)</title><rect x="699.5" y="277" width="1.0" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="702.46" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (37,547,275 samples, 0.05%)</title><rect x="776.0" y="309" width="0.6" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="778.99" y="319.5" ></text>
</g>
<g >
<title>Directory::primitive_w_lock (5,263,339,879 samples, 6.65%)</title><rect x="731.3" y="389" width="78.5" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="734.28" y="399.5" >Directory..</text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (678,099,898 samples, 0.86%)</title><rect x="765.4" y="309" width="10.1" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="768.41" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned short&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long const&amp;&gt;, std::tuple&lt;&gt; &gt; (283,440,654 samples, 0.36%)</title><rect x="805.5" y="325" width="4.3" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="808.53" y="335.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (17,224,999 samples, 0.02%)</title><rect x="716.7" y="277" width="0.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="719.72" y="287.5" ></text>
</g>
<g >
<title>__pthread_spin_lock (11,186,878,777 samples, 14.14%)</title><rect x="1019.5" y="341" width="166.8" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1022.53" y="351.5" >__pthread_spin_lock</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned short&gt;, false&gt; &gt;::allocate (283,440,654 samples, 0.36%)</title><rect x="805.5" y="293" width="4.3" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="808.53" y="303.5" ></text>
</g>
<g >
<title>operator new (277,664,827 samples, 0.35%)</title><rect x="805.6" y="277" width="4.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="808.62" y="287.5" ></text>
</g>
<g >
<title>do_syscall_64 (95,225,552 samples, 0.12%)</title><rect x="808.3" y="165" width="1.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="811.26" y="175.5" ></text>
</g>
<g >
<title>__handle_mm_fault (43,395,349 samples, 0.05%)</title><rect x="758.8" y="245" width="0.7" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="761.82" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (28,842,442 samples, 0.04%)</title><rect x="727.7" y="277" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="730.69" y="287.5" ></text>
</g>
<g >
<title>CacheAgent::processSwitchMessage (11,557,636 samples, 0.01%)</title><rect x="163.8" y="389" width="0.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="166.84" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned short&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (25,968,114 samples, 0.03%)</title><rect x="776.6" y="325" width="0.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="779.55" y="335.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned short&gt;::compare_exchange_strong (204,924,867 samples, 0.26%)</title><rect x="160.8" y="341" width="3.0" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="163.78" y="351.5" ></text>
</g>
<g >
<title>AbstractMessageConnection::getSendPool (121,278,213 samples, 0.15%)</title><rect x="814.9" y="373" width="1.8" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="817.88" y="383.5" ></text>
</g>
<g >
<title>handle_mm_fault (20,161,788 samples, 0.03%)</title><rect x="777.5" y="261" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="780.46" y="271.5" ></text>
</g>
<g >
<title>__pthread_spin_lock (190,371,176 samples, 0.24%)</title><rect x="166.6" y="325" width="2.9" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="169.64" y="335.5" ></text>
</g>
<g >
<title>[[stack]] (37,525,344 samples, 0.05%)</title><rect x="22.7" y="453" width="0.6" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="25.74" y="463.5" ></text>
</g>
<g >
<title>handle_pte_fault (43,131,616 samples, 0.05%)</title><rect x="699.7" y="229" width="0.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="702.71" y="239.5" ></text>
</g>
<g >
<title>pollWithCQ (32,470,651,883 samples, 41.03%)</title><rect x="169.5" y="389" width="484.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="172.48" y="399.5" >pollWithCQ</text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned short&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (8,628,906 samples, 0.01%)</title><rect x="777.8" y="309" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="780.80" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (75,016,340 samples, 0.09%)</title><rect x="727.7" y="293" width="1.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="730.69" y="303.5" ></text>
</g>
<g >
<title>__mem_cgroup_charge (57,687,597 samples, 0.07%)</title><rect x="798.8" y="133" width="0.9" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="801.80" y="143.5" ></text>
</g>
<g >
<title>charge_memcg (11,549,620 samples, 0.01%)</title><rect x="807.5" y="101" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="810.47" y="111.5" ></text>
</g>
<g >
<title>exc_page_fault (80,207,092 samples, 0.10%)</title><rect x="699.5" y="293" width="1.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="702.46" y="303.5" ></text>
</g>
<g >
<title>std::atomic&lt;AtomicTag&gt;::store (40,437,933 samples, 0.05%)</title><rect x="154.4" y="357" width="0.6" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="157.37" y="367.5" ></text>
</g>
<g >
<title>WRLock::wLock (204,924,867 samples, 0.26%)</title><rect x="160.8" y="373" width="3.0" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="163.78" y="383.5" ></text>
</g>
<g >
<title>do_user_addr_fault (98,078,420 samples, 0.12%)</title><rect x="798.7" y="213" width="1.5" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="801.72" y="223.5" ></text>
</g>
<g >
<title>exc_page_fault (58,307,849 samples, 0.07%)</title><rect x="807.3" y="213" width="0.8" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="810.26" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (219,303,415 samples, 0.28%)</title><rect x="700.7" y="277" width="3.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="703.70" y="287.5" ></text>
</g>
<g >
<title>rdmaRawSend (158,641,702 samples, 0.20%)</title><rect x="820.4" y="341" width="2.4" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="823.43" y="351.5" ></text>
</g>
<g >
<title>__clone3 (69,364,352,221 samples, 87.65%)</title><rect x="152.5" y="453" width="1034.3" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="155.52" y="463.5" >__clone3</text>
</g>
<g >
<title>rdmaRawSend (1,338,483,604 samples, 1.69%)</title><rect x="820.0" y="373" width="20.0" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="823.05" y="383.5" ></text>
</g>
<g >
<title>handle_pte_fault (98,078,420 samples, 0.12%)</title><rect x="798.7" y="165" width="1.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="801.72" y="175.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (14,450,184 samples, 0.02%)</title><rect x="653.4" y="309" width="0.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="656.38" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (43,324,077 samples, 0.05%)</title><rect x="704.0" y="277" width="0.6" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="706.97" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long, std::pair&lt;unsigned long const, BlockInfo*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, BlockInfo*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (8,715,683 samples, 0.01%)</title><rect x="814.1" y="357" width="0.1" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="817.11" y="367.5" ></text>
</g>
<g >
<title>Keeper::memGet (8,306,840 samples, 0.01%)</title><rect x="1186.9" y="341" width="0.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1189.91" y="351.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (14,572,391 samples, 0.02%)</title><rect x="653.4" y="325" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="656.38" y="335.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (8,669,885 samples, 0.01%)</title><rect x="653.4" y="277" width="0.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="656.38" y="287.5" ></text>
</g>
<g >
<title>hash::jenkins (28,815,443 samples, 0.04%)</title><rect x="157.3" y="341" width="0.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="160.25" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, BlockInfo*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (14,406,061 samples, 0.02%)</title><rect x="813.6" y="293" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="816.63" y="303.5" ></text>
</g>
<g >
<title>[anon] (8,088,375,616 samples, 10.22%)</title><rect x="23.3" y="453" width="120.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="26.30" y="463.5" >[anon]</text>
</g>
<g >
<title>grow_heap (95,225,552 samples, 0.12%)</title><rect x="808.3" y="213" width="1.4" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="811.26" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (106,939,698 samples, 0.14%)</title><rect x="732.7" y="325" width="1.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="735.74" y="335.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (14,441,613 samples, 0.02%)</title><rect x="807.6" y="101" width="0.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="810.64" y="111.5" ></text>
</g>
<g >
<title>handle_mm_fault (49,172,806 samples, 0.06%)</title><rect x="758.7" y="261" width="0.8" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="761.74" y="271.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long&gt;::operator (159,769,107 samples, 0.20%)</title><rect x="728.9" y="293" width="2.4" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="731.90" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned short&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (262,627,492 samples, 0.33%)</title><rect x="700.7" y="309" width="3.9" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="703.70" y="319.5" ></text>
</g>
<g >
<title>find_vma (8,664,900 samples, 0.01%)</title><rect x="808.3" y="117" width="0.2" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="811.34" y="127.5" ></text>
</g>
<g >
<title>WRLock::wLock (115,429,333 samples, 0.15%)</title><rect x="155.0" y="373" width="1.7" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="157.97" y="383.5" ></text>
</g>
<g >
<title>AbstractMessageConnection::getMessage (262,656,989 samples, 0.33%)</title><rect x="667.5" y="373" width="3.9" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="670.50" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned short&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (1,836,863,726 samples, 2.32%)</title><rect x="778.1" y="309" width="27.3" height="15.0" fill="rgb(253,220,52)" rx="2" ry="2" />
<text  x="781.06" y="319.5" >s..</text>
</g>
<g >
<title>handle_mm_fault (98,078,420 samples, 0.12%)</title><rect x="798.7" y="197" width="1.5" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="801.72" y="207.5" ></text>
</g>
<g >
<title>rdmaWrite (346,237,205 samples, 0.44%)</title><rect x="164.3" y="373" width="5.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="167.31" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned short&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (66,323,876 samples, 0.08%)</title><rect x="777.1" y="325" width="1.0" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="780.07" y="335.5" ></text>
</g>
<g >
<title>rdmaRawSend (1,153,861,869 samples, 1.46%)</title><rect x="822.8" y="357" width="17.2" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="825.80" y="367.5" ></text>
</g>
<g >
<title>exc_page_fault (14,444,826 samples, 0.02%)</title><rect x="775.2" y="261" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="778.18" y="271.5" ></text>
</g>
<g >
<title>__pthread_spin_lock (441,827,663 samples, 0.56%)</title><rect x="10.2" y="437" width="6.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="13.17" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned short&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (2,978,109,901 samples, 3.76%)</title><rect x="672.9" y="357" width="44.4" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="675.88" y="367.5" >std:..</text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, BlockInfo*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, BlockInfo*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (49,032,550 samples, 0.06%)</title><rect x="813.4" y="325" width="0.7" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="816.38" y="335.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.30] (69,364,352,221 samples, 87.65%)</title><rect x="152.5" y="421" width="1034.3" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="155.52" y="431.5" >[libstdc++.so.6.0.30]</text>
</g>
<g >
<title>handle_pte_fault (28,878,955 samples, 0.04%)</title><rect x="759.0" y="229" width="0.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="762.00" y="239.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (95,225,552 samples, 0.12%)</title><rect x="808.3" y="181" width="1.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="811.26" y="191.5" ></text>
</g>
<g >
<title>handle_mm_fault (11,556,007 samples, 0.01%)</title><rect x="775.2" y="229" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="778.22" y="239.5" ></text>
</g>
<g >
<title>[libmlx5.so.1.24.47.0] (1,521,393,866 samples, 1.92%)</title><rect x="400.7" y="341" width="22.7" height="15.0" fill="rgb(224,87,21)" rx="2" ry="2" />
<text  x="403.69" y="351.5" >[..</text>
</g>
<g >
<title>asm_exc_page_fault (14,433,651 samples, 0.02%)</title><rect x="764.3" y="261" width="0.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="767.29" y="271.5" ></text>
</g>
<g >
<title>handle_pte_fault (11,544,810 samples, 0.01%)</title><rect x="764.3" y="181" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="767.29" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned short&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (604,092,496 samples, 0.76%)</title><rect x="722.3" y="341" width="9.0" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="725.27" y="351.5" ></text>
</g>
<g >
<title>do_numa_page (25,990,103 samples, 0.03%)</title><rect x="759.0" y="213" width="0.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="762.00" y="223.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, unsigned short, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned short&gt; &gt; &gt;::find (2,986,796,028 samples, 3.77%)</title><rect x="672.7" y="373" width="44.6" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="675.75" y="383.5" >std:..</text>
</g>
<g >
<title>AbstractMessageConnection::getMessage (14,437,318 samples, 0.02%)</title><rect x="144.2" y="437" width="0.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="147.21" y="447.5" ></text>
</g>
<g >
<title>sync_regs (8,663,531 samples, 0.01%)</title><rect x="777.9" y="309" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="780.93" y="319.5" ></text>
</g>
<g >
<title>__memset_evex_unaligned_erms (124,032,958 samples, 0.16%)</title><rect x="798.4" y="261" width="1.9" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="801.41" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (92,073,451 samples, 0.12%)</title><rect x="800.3" y="293" width="1.4" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="803.35" y="303.5" ></text>
</g>
<g >
<title>__memcpy_evex_unaligned_erms (17,322,801 samples, 0.02%)</title><rect x="832.9" y="325" width="0.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="835.91" y="335.5" ></text>
</g>
<g >
<title>Directory::sendAck2AppByPassSwitch (256,941,063 samples, 0.32%)</title><rect x="814.2" y="389" width="3.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="817.24" y="399.5" ></text>
</g>
<g >
<title>__pthread_spin_lock (15,422,812,021 samples, 19.49%)</title><rect x="423.4" y="341" width="229.9" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="426.37" y="351.5" >__pthread_spin_lock</text>
</g>
<g >
<title>change_protection (11,516,127 samples, 0.01%)</title><rect x="808.5" y="101" width="0.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="811.47" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (20,191,079 samples, 0.03%)</title><rect x="776.6" y="277" width="0.3" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="779.64" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned short&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (2,891,545,006 samples, 3.65%)</title><rect x="674.2" y="341" width="43.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="677.17" y="351.5" >std:..</text>
</g>
<g >
<title>do_anonymous_page (98,078,420 samples, 0.12%)</title><rect x="798.7" y="149" width="1.5" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="801.72" y="159.5" ></text>
</g>
<g >
<title>get_page_from_freelist (20,200,482 samples, 0.03%)</title><rect x="799.7" y="101" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="802.75" y="111.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned short&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (2,880,326,253 samples, 3.64%)</title><rect x="732.7" y="357" width="42.9" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="735.66" y="367.5" >std:..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned short&gt;, false&gt; &gt; &gt;::allocate (283,440,654 samples, 0.36%)</title><rect x="805.5" y="309" width="4.3" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="808.53" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned short&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (592,578,143 samples, 0.75%)</title><rect x="722.4" y="325" width="8.9" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="725.44" y="335.5" ></text>
</g>
<g >
<title>do_user_addr_fault (28,820,824 samples, 0.04%)</title><rect x="777.3" y="277" width="0.5" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="780.33" y="287.5" ></text>
</g>
<g >
<title>Directory::dirThread (35,744,991,992 samples, 45.17%)</title><rect x="653.6" y="405" width="533.0" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="656.64" y="415.5" >Directory::dirThread</text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned short&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (398,385,709 samples, 0.50%)</title><rect x="759.5" y="309" width="5.9" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="762.47" y="319.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (31,709,121 samples, 0.04%)</title><rect x="777.3" y="309" width="0.5" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="780.33" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (20,191,079 samples, 0.03%)</title><rect x="776.6" y="293" width="0.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="779.64" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned short&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned short&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (1,917,628,612 samples, 2.42%)</title><rect x="776.9" y="341" width="28.6" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="779.94" y="351.5" >st..</text>
</g>
<g >
<title>__pthread_spin_lock (727,256,575 samples, 0.92%)</title><rect x="120.9" y="437" width="10.9" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="123.94" y="447.5" ></text>
</g>
<g >
<title>LineInfo::getTagAndStatus (207,927,822 samples, 0.26%)</title><rect x="157.7" y="357" width="3.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="160.68" y="367.5" ></text>
</g>
<g >
<title>rdmaRawSend (8,665,366 samples, 0.01%)</title><rect x="671.4" y="357" width="0.1" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="674.41" y="367.5" ></text>
</g>
<g >
<title>lru_cache_add (8,652,175 samples, 0.01%)</title><rect x="800.0" y="117" width="0.2" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="803.05" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (135,693,444 samples, 0.17%)</title><rect x="720.2" y="309" width="2.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="723.25" y="319.5" ></text>
</g>
</g>
</svg>
